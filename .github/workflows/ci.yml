name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    # Temporarily disabled cache due to corruption issues
    # - name: Cache Go modules
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       ~/.cache/go-build
    #       ~/go/pkg/mod
    #     key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v3
    #     restore-keys: |
    #       ${{ runner.os }}-go-${{ env.GO_VERSION }}-
    #     save-always: true
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Make test script executable
      run: chmod +x scripts/run-tests.sh
      
    - name: Run comprehensive tests
      run: ./scripts/run-tests.sh

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html



  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    # Temporarily disabled cache due to corruption issues
    # - name: Cache Go modules
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       ~/.cache/go-build
    #       ~/go/pkg/mod
    #     key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v3
    #     restore-keys: |
    #       ${{ runner.os }}-go-${{ env.GO_VERSION }}-
    #     save-always: true
          
    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p build
        BINARY_NAME=agentry-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags "-X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o build/${BINARY_NAME} main.go
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        platforms: linux/amd64
        push: false
        tags: agentry:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Create release assets
      run: |
        mkdir -p release
        for dir in artifacts/binaries-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            for file in *; do
              if [ -f "$file" ]; then
                cp "$file" "../../release/"
              fi
            done
            cd - > /dev/null
          fi
        done
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}